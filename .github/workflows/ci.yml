name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t postgres-backup-test .

  shellcheck:
    name: ShellCheck Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install ShellCheck
        run: sudo apt-get install -y shellcheck
      - name: Run ShellCheck on shell scripts
        run: find scripts -type f -name "*.sh" -exec shellcheck {} \;

  test:
    name: Bats Test
    runs-on: ubuntu-latest
    needs: [docker-build, shellcheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm test

  docker-publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/minibikini/postgres-backup-rclone
          tags: |
            type=raw,value=15
            type=sha

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate provenance attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/minibikini/postgres-backup-rclone
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
