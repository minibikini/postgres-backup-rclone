services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_USER: "${POSTGRES_USER:-postgres}"
      POSTGRES_DB: "${POSTGRES_DB:-postgres}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres-net

  backup:
    build: .
    environment:
      # PostgreSQL connection
      PG_HOST: postgres
      PG_PORT: 5432
      PG_USER: postgres
      PG_DATABASE: postgres
      PGPASSWORD: "${POSTGRES_PASSWORD}"
      
      # Cloudflare R2 configuration
      RCLONE_CONFIG_REMOTE_TYPE: s3
      RCLONE_CONFIG_REMOTE_PROVIDER: Cloudflare
      RCLONE_CONFIG_REMOTE_ENDPOINT: "${R2_ENDPOINT}"
      RCLONE_CONFIG_REMOTE_ACCESS_KEY_ID: "${R2_ACCESS_KEY_ID}"
      RCLONE_CONFIG_REMOTE_SECRET_ACCESS_KEY: "${R2_SECRET_ACCESS_KEY}"
      
      # Backup configuration
      RCLONE_PATH: "${BACKUP_PATH:-backups}"
      BACKUP_SCHEDULE: "${BACKUP_SCHEDULE:-0 1 * * *}"
      
    entrypoint: ["/bin/sh", "-c"]
    command: |
      echo "$${BACKUP_SCHEDULE} /usr/local/bin/backup.sh" > /var/spool/cron/crontabs/root && \
      crond -f -d 8
    
    depends_on:
      postgres:
        condition: service_healthy
    
    networks:
      - postgres-net

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - postgres-net
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  minio-data:

networks:
  postgres-net:
    name: postgres-net
